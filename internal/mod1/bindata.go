// Code generated by go-bindata.
// sources:
// dict/mod1/ipa-neologd-dict.jp
// dict/mod1/ipa-neologd-dict.jq
// dict/mod1/ipa-neologd-dict.jr
// dict/mod1/ipa-neologd-dict.js
// dict/mod1/ipa-neologd-dict.jt
// dict/mod1/ipa-neologd-dict.ju
// dict/mod1/ipa-neologd-dict.jv
// dict/mod1/ipa-neologd-dict.jw
// dict/mod1/ipa-neologd-dict.jx
// dict/mod1/ipa-neologd-dict.jy
// dict/mod1/ipa-neologd-dict.jz
// dict/mod1/ipa-neologd-dict.ka
// dict/mod1/ipa-neologd-dict.kb
// dict/mod1/ipa-neologd-dict.kc
// dict/mod1/ipa-neologd-dict.kd
// dict/mod1/ipa-neologd-dict.ke
// dict/mod1/ipa-neologd-dict.kf
// dict/mod1/ipa-neologd-dict.kg
// dict/mod1/ipa-neologd-dict.kh
// dict/mod1/ipa-neologd-dict.ki
// dict/mod1/ipa-neologd-dict.kj
// dict/mod1/ipa-neologd-dict.kk
// dict/mod1/ipa-neologd-dict.kl
// dict/mod1/ipa-neologd-dict.km
// dict/mod1/ipa-neologd-dict.kn
// dict/mod1/ipa-neologd-dict.ko
// dict/mod1/ipa-neologd-dict.kp
// dict/mod1/ipa-neologd-dict.kq
// dict/mod1/ipa-neologd-dict.kr
// dict/mod1/ipa-neologd-dict.ks
// dict/mod1/ipa-neologd-dict.kt
// dict/mod1/ipa-neologd-dict.ku
// dict/mod1/ipa-neologd-dict.kv
// dict/mod1/ipa-neologd-dict.kw
// dict/mod1/ipa-neologd-dict.kx
// dict/mod1/ipa-neologd-dict.ky
// dict/mod1/ipa-neologd-dict.kz
// dict/mod1/ipa-neologd-dict.la
// dict/mod1/ipa-neologd-dict.lb
// dict/mod1/ipa-neologd-dict.lc
// dict/mod1/ipa-neologd-dict.ld
// dict/mod1/ipa-neologd-dict.le
// dict/mod1/ipa-neologd-dict.lf
// dict/mod1/ipa-neologd-dict.lg
// dict/mod1/ipa-neologd-dict.lh
// dict/mod1/ipa-neologd-dict.li
// dict/mod1/ipa-neologd-dict.lj
// dict/mod1/ipa-neologd-dict.lk
// dict/mod1/ipa-neologd-dict.ll
// dict/mod1/ipa-neologd-dict.lm
// dict/mod1/ipa-neologd-dict.ln
// dict/mod1/ipa-neologd-dict.lo
// dict/mod1/ipa-neologd-dict.lp
// dict/mod1/ipa-neologd-dict.lq
// dict/mod1/ipa-neologd-dict.lr
// dict/mod1/ipa-neologd-dict.ls
// dict/mod1/ipa-neologd-dict.lt
// dict/mod1/ipa-neologd-dict.lu
// dict/mod1/ipa-neologd-dict.lv
// dict/mod1/ipa-neologd-dict.lw
// dict/mod1/ipa-neologd-dict.lx
// dict/mod1/ipa-neologd-dict.ly
// dict/mod1/ipa-neologd-dict.lz
// dict/mod1/ipa-neologd-dict.ma
// dict/mod1/ipa-neologd-dict.mb
// dict/mod1/ipa-neologd-dict.mc
// dict/mod1/ipa-neologd-dict.md
// dict/mod1/ipa-neologd-dict.me
// dict/mod1/ipa-neologd-dict.mf
// dict/mod1/ipa-neologd-dict.mg
// dict/mod1/ipa-neologd-dict.mh
// dict/mod1/ipa-neologd-dict.mi
// dict/mod1/ipa-neologd-dict.mj
// dict/mod1/ipa-neologd-dict.mk
// dict/mod1/ipa-neologd-dict.ml
// dict/mod1/ipa-neologd-dict.mm
// dict/mod1/ipa-neologd-dict.mn
// dict/mod1/ipa-neologd-dict.mo
// dict/mod1/ipa-neologd-dict.mp
// dict/mod1/ipa-neologd-dict.mq
// dict/mod1/ipa-neologd-dict.mr
// dict/mod1/ipa-neologd-dict.ms
// dict/mod1/ipa-neologd-dict.mt
// dict/mod1/ipa-neologd-dict.mu
// dict/mod1/ipa-neologd-dict.mv
// dict/mod1/ipa-neologd-dict.mw
// dict/mod1/ipa-neologd-dict.mx
// dict/mod1/ipa-neologd-dict.my
// dict/mod1/ipa-neologd-dict.mz
// dict/mod1/ipa-neologd-dict.na
// dict/mod1/ipa-neologd-dict.nb
// dict/mod1/ipa-neologd-dict.nc
// dict/mod1/ipa-neologd-dict.nd
// dict/mod1/ipa-neologd-dict.ne
// dict/mod1/ipa-neologd-dict.nf
// dict/mod1/ipa-neologd-dict.ng
// dict/mod1/ipa-neologd-dict.nh
// dict/mod1/ipa-neologd-dict.ni
// dict/mod1/ipa-neologd-dict.nj
// dict/mod1/ipa-neologd-dict.nk
// dict/mod1/ipa-neologd-dict.nl
// dict/mod1/ipa-neologd-dict.nm
// dict/mod1/ipa-neologd-dict.nn
// dict/mod1/ipa-neologd-dict.no
// dict/mod1/ipa-neologd-dict.np
// dict/mod1/ipa-neologd-dict.nq
// dict/mod1/ipa-neologd-dict.nr
// dict/mod1/ipa-neologd-dict.ns
// dict/mod1/ipa-neologd-dict.nt
// dict/mod1/ipa-neologd-dict.nu
// dict/mod1/ipa-neologd-dict.nv
// dict/mod1/ipa-neologd-dict.nw
// dict/mod1/ipa-neologd-dict.nx
// dict/mod1/ipa-neologd-dict.ny
// dict/mod1/ipa-neologd-dict.nz
// dict/mod1/ipa-neologd-dict.oa
// dict/mod1/ipa-neologd-dict.ob
// dict/mod1/ipa-neologd-dict.oc
// dict/mod1/ipa-neologd-dict.od
// dict/mod1/ipa-neologd-dict.oe
// dict/mod1/ipa-neologd-dict.of
// dict/mod1/ipa-neologd-dict.og
// dict/mod1/ipa-neologd-dict.oh
// dict/mod1/ipa-neologd-dict.oi
// dict/mod1/ipa-neologd-dict.oj
// dict/mod1/ipa-neologd-dict.ok
// dict/mod1/ipa-neologd-dict.ol
// dict/mod1/ipa-neologd-dict.om
// dict/mod1/ipa-neologd-dict.on
// dict/mod1/ipa-neologd-dict.oo
// dict/mod1/ipa-neologd-dict.op
// dict/mod1/ipa-neologd-dict.oq
// dict/mod1/ipa-neologd-dict.or
// dict/mod1/ipa-neologd-dict.os
// dict/mod1/ipa-neologd-dict.ot
// dict/mod1/ipa-neologd-dict.ou
// dict/mod1/ipa-neologd-dict.ov
// dict/mod1/ipa-neologd-dict.ow
// dict/mod1/ipa-neologd-dict.ox
// dict/mod1/ipa-neologd-dict.oy
// dict/mod1/ipa-neologd-dict.oz
// dict/mod1/ipa-neologd-dict.pa
// dict/mod1/ipa-neologd-dict.pb
// dict/mod1/ipa-neologd-dict.pc
// dict/mod1/ipa-neologd-dict.pd
// dict/mod1/ipa-neologd-dict.pe
// dict/mod1/ipa-neologd-dict.pf
// dict/mod1/ipa-neologd-dict.pg
// dict/mod1/ipa-neologd-dict.ph
// dict/mod1/ipa-neologd-dict.pi
// dict/mod1/ipa-neologd-dict.pj
// dict/mod1/ipa-neologd-dict.pk
// dict/mod1/ipa-neologd-dict.pl
// dict/mod1/ipa-neologd-dict.pm
// dict/mod1/ipa-neologd-dict.pn
// dict/mod1/ipa-neologd-dict.po
// dict/mod1/ipa-neologd-dict.pp
// dict/mod1/ipa-neologd-dict.pq
// dict/mod1/ipa-neologd-dict.pr
// dict/mod1/ipa-neologd-dict.ps
// dict/mod1/ipa-neologd-dict.pt
// dict/mod1/ipa-neologd-dict.pu
// dict/mod1/ipa-neologd-dict.pv
// dict/mod1/ipa-neologd-dict.pw
// dict/mod1/ipa-neologd-dict.px
// dict/mod1/ipa-neologd-dict.py
// dict/mod1/ipa-neologd-dict.pz
// dict/mod1/ipa-neologd-dict.qa
// dict/mod1/ipa-neologd-dict.qb
// dict/mod1/ipa-neologd-dict.qc
// DO NOT EDIT!

package data

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)
type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"dict/mod1/ipa-neologd-dict.jp": dictMod1IpaNeologdDictJp,
	"dict/mod1/ipa-neologd-dict.jq": dictMod1IpaNeologdDictJq,
	"dict/mod1/ipa-neologd-dict.jr": dictMod1IpaNeologdDictJr,
	"dict/mod1/ipa-neologd-dict.js": dictMod1IpaNeologdDictJs,
	"dict/mod1/ipa-neologd-dict.jt": dictMod1IpaNeologdDictJt,
	"dict/mod1/ipa-neologd-dict.ju": dictMod1IpaNeologdDictJu,
	"dict/mod1/ipa-neologd-dict.jv": dictMod1IpaNeologdDictJv,
	"dict/mod1/ipa-neologd-dict.jw": dictMod1IpaNeologdDictJw,
	"dict/mod1/ipa-neologd-dict.jx": dictMod1IpaNeologdDictJx,
	"dict/mod1/ipa-neologd-dict.jy": dictMod1IpaNeologdDictJy,
	"dict/mod1/ipa-neologd-dict.jz": dictMod1IpaNeologdDictJz,
	"dict/mod1/ipa-neologd-dict.ka": dictMod1IpaNeologdDictKa,
	"dict/mod1/ipa-neologd-dict.kb": dictMod1IpaNeologdDictKb,
	"dict/mod1/ipa-neologd-dict.kc": dictMod1IpaNeologdDictKc,
	"dict/mod1/ipa-neologd-dict.kd": dictMod1IpaNeologdDictKd,
	"dict/mod1/ipa-neologd-dict.ke": dictMod1IpaNeologdDictKe,
	"dict/mod1/ipa-neologd-dict.kf": dictMod1IpaNeologdDictKf,
	"dict/mod1/ipa-neologd-dict.kg": dictMod1IpaNeologdDictKg,
	"dict/mod1/ipa-neologd-dict.kh": dictMod1IpaNeologdDictKh,
	"dict/mod1/ipa-neologd-dict.ki": dictMod1IpaNeologdDictKi,
	"dict/mod1/ipa-neologd-dict.kj": dictMod1IpaNeologdDictKj,
	"dict/mod1/ipa-neologd-dict.kk": dictMod1IpaNeologdDictKk,
	"dict/mod1/ipa-neologd-dict.kl": dictMod1IpaNeologdDictKl,
	"dict/mod1/ipa-neologd-dict.km": dictMod1IpaNeologdDictKm,
	"dict/mod1/ipa-neologd-dict.kn": dictMod1IpaNeologdDictKn,
	"dict/mod1/ipa-neologd-dict.ko": dictMod1IpaNeologdDictKo,
	"dict/mod1/ipa-neologd-dict.kp": dictMod1IpaNeologdDictKp,
	"dict/mod1/ipa-neologd-dict.kq": dictMod1IpaNeologdDictKq,
	"dict/mod1/ipa-neologd-dict.kr": dictMod1IpaNeologdDictKr,
	"dict/mod1/ipa-neologd-dict.ks": dictMod1IpaNeologdDictKs,
	"dict/mod1/ipa-neologd-dict.kt": dictMod1IpaNeologdDictKt,
	"dict/mod1/ipa-neologd-dict.ku": dictMod1IpaNeologdDictKu,
	"dict/mod1/ipa-neologd-dict.kv": dictMod1IpaNeologdDictKv,
	"dict/mod1/ipa-neologd-dict.kw": dictMod1IpaNeologdDictKw,
	"dict/mod1/ipa-neologd-dict.kx": dictMod1IpaNeologdDictKx,
	"dict/mod1/ipa-neologd-dict.ky": dictMod1IpaNeologdDictKy,
	"dict/mod1/ipa-neologd-dict.kz": dictMod1IpaNeologdDictKz,
	"dict/mod1/ipa-neologd-dict.la": dictMod1IpaNeologdDictLa,
	"dict/mod1/ipa-neologd-dict.lb": dictMod1IpaNeologdDictLb,
	"dict/mod1/ipa-neologd-dict.lc": dictMod1IpaNeologdDictLc,
	"dict/mod1/ipa-neologd-dict.ld": dictMod1IpaNeologdDictLd,
	"dict/mod1/ipa-neologd-dict.le": dictMod1IpaNeologdDictLe,
	"dict/mod1/ipa-neologd-dict.lf": dictMod1IpaNeologdDictLf,
	"dict/mod1/ipa-neologd-dict.lg": dictMod1IpaNeologdDictLg,
	"dict/mod1/ipa-neologd-dict.lh": dictMod1IpaNeologdDictLh,
	"dict/mod1/ipa-neologd-dict.li": dictMod1IpaNeologdDictLi,
	"dict/mod1/ipa-neologd-dict.lj": dictMod1IpaNeologdDictLj,
	"dict/mod1/ipa-neologd-dict.lk": dictMod1IpaNeologdDictLk,
	"dict/mod1/ipa-neologd-dict.ll": dictMod1IpaNeologdDictLl,
	"dict/mod1/ipa-neologd-dict.lm": dictMod1IpaNeologdDictLm,
	"dict/mod1/ipa-neologd-dict.ln": dictMod1IpaNeologdDictLn,
	"dict/mod1/ipa-neologd-dict.lo": dictMod1IpaNeologdDictLo,
	"dict/mod1/ipa-neologd-dict.lp": dictMod1IpaNeologdDictLp,
	"dict/mod1/ipa-neologd-dict.lq": dictMod1IpaNeologdDictLq,
	"dict/mod1/ipa-neologd-dict.lr": dictMod1IpaNeologdDictLr,
	"dict/mod1/ipa-neologd-dict.ls": dictMod1IpaNeologdDictLs,
	"dict/mod1/ipa-neologd-dict.lt": dictMod1IpaNeologdDictLt,
	"dict/mod1/ipa-neologd-dict.lu": dictMod1IpaNeologdDictLu,
	"dict/mod1/ipa-neologd-dict.lv": dictMod1IpaNeologdDictLv,
	"dict/mod1/ipa-neologd-dict.lw": dictMod1IpaNeologdDictLw,
	"dict/mod1/ipa-neologd-dict.lx": dictMod1IpaNeologdDictLx,
	"dict/mod1/ipa-neologd-dict.ly": dictMod1IpaNeologdDictLy,
	"dict/mod1/ipa-neologd-dict.lz": dictMod1IpaNeologdDictLz,
	"dict/mod1/ipa-neologd-dict.ma": dictMod1IpaNeologdDictMa,
	"dict/mod1/ipa-neologd-dict.mb": dictMod1IpaNeologdDictMb,
	"dict/mod1/ipa-neologd-dict.mc": dictMod1IpaNeologdDictMc,
	"dict/mod1/ipa-neologd-dict.md": dictMod1IpaNeologdDictMd,
	"dict/mod1/ipa-neologd-dict.me": dictMod1IpaNeologdDictMe,
	"dict/mod1/ipa-neologd-dict.mf": dictMod1IpaNeologdDictMf,
	"dict/mod1/ipa-neologd-dict.mg": dictMod1IpaNeologdDictMg,
	"dict/mod1/ipa-neologd-dict.mh": dictMod1IpaNeologdDictMh,
	"dict/mod1/ipa-neologd-dict.mi": dictMod1IpaNeologdDictMi,
	"dict/mod1/ipa-neologd-dict.mj": dictMod1IpaNeologdDictMj,
	"dict/mod1/ipa-neologd-dict.mk": dictMod1IpaNeologdDictMk,
	"dict/mod1/ipa-neologd-dict.ml": dictMod1IpaNeologdDictMl,
	"dict/mod1/ipa-neologd-dict.mm": dictMod1IpaNeologdDictMm,
	"dict/mod1/ipa-neologd-dict.mn": dictMod1IpaNeologdDictMn,
	"dict/mod1/ipa-neologd-dict.mo": dictMod1IpaNeologdDictMo,
	"dict/mod1/ipa-neologd-dict.mp": dictMod1IpaNeologdDictMp,
	"dict/mod1/ipa-neologd-dict.mq": dictMod1IpaNeologdDictMq,
	"dict/mod1/ipa-neologd-dict.mr": dictMod1IpaNeologdDictMr,
	"dict/mod1/ipa-neologd-dict.ms": dictMod1IpaNeologdDictMs,
	"dict/mod1/ipa-neologd-dict.mt": dictMod1IpaNeologdDictMt,
	"dict/mod1/ipa-neologd-dict.mu": dictMod1IpaNeologdDictMu,
	"dict/mod1/ipa-neologd-dict.mv": dictMod1IpaNeologdDictMv,
	"dict/mod1/ipa-neologd-dict.mw": dictMod1IpaNeologdDictMw,
	"dict/mod1/ipa-neologd-dict.mx": dictMod1IpaNeologdDictMx,
	"dict/mod1/ipa-neologd-dict.my": dictMod1IpaNeologdDictMy,
	"dict/mod1/ipa-neologd-dict.mz": dictMod1IpaNeologdDictMz,
	"dict/mod1/ipa-neologd-dict.na": dictMod1IpaNeologdDictNa,
	"dict/mod1/ipa-neologd-dict.nb": dictMod1IpaNeologdDictNb,
	"dict/mod1/ipa-neologd-dict.nc": dictMod1IpaNeologdDictNc,
	"dict/mod1/ipa-neologd-dict.nd": dictMod1IpaNeologdDictNd,
	"dict/mod1/ipa-neologd-dict.ne": dictMod1IpaNeologdDictNe,
	"dict/mod1/ipa-neologd-dict.nf": dictMod1IpaNeologdDictNf,
	"dict/mod1/ipa-neologd-dict.ng": dictMod1IpaNeologdDictNg,
	"dict/mod1/ipa-neologd-dict.nh": dictMod1IpaNeologdDictNh,
	"dict/mod1/ipa-neologd-dict.ni": dictMod1IpaNeologdDictNi,
	"dict/mod1/ipa-neologd-dict.nj": dictMod1IpaNeologdDictNj,
	"dict/mod1/ipa-neologd-dict.nk": dictMod1IpaNeologdDictNk,
	"dict/mod1/ipa-neologd-dict.nl": dictMod1IpaNeologdDictNl,
	"dict/mod1/ipa-neologd-dict.nm": dictMod1IpaNeologdDictNm,
	"dict/mod1/ipa-neologd-dict.nn": dictMod1IpaNeologdDictNn,
	"dict/mod1/ipa-neologd-dict.no": dictMod1IpaNeologdDictNo,
	"dict/mod1/ipa-neologd-dict.np": dictMod1IpaNeologdDictNp,
	"dict/mod1/ipa-neologd-dict.nq": dictMod1IpaNeologdDictNq,
	"dict/mod1/ipa-neologd-dict.nr": dictMod1IpaNeologdDictNr,
	"dict/mod1/ipa-neologd-dict.ns": dictMod1IpaNeologdDictNs,
	"dict/mod1/ipa-neologd-dict.nt": dictMod1IpaNeologdDictNt,
	"dict/mod1/ipa-neologd-dict.nu": dictMod1IpaNeologdDictNu,
	"dict/mod1/ipa-neologd-dict.nv": dictMod1IpaNeologdDictNv,
	"dict/mod1/ipa-neologd-dict.nw": dictMod1IpaNeologdDictNw,
	"dict/mod1/ipa-neologd-dict.nx": dictMod1IpaNeologdDictNx,
	"dict/mod1/ipa-neologd-dict.ny": dictMod1IpaNeologdDictNy,
	"dict/mod1/ipa-neologd-dict.nz": dictMod1IpaNeologdDictNz,
	"dict/mod1/ipa-neologd-dict.oa": dictMod1IpaNeologdDictOa,
	"dict/mod1/ipa-neologd-dict.ob": dictMod1IpaNeologdDictOb,
	"dict/mod1/ipa-neologd-dict.oc": dictMod1IpaNeologdDictOc,
	"dict/mod1/ipa-neologd-dict.od": dictMod1IpaNeologdDictOd,
	"dict/mod1/ipa-neologd-dict.oe": dictMod1IpaNeologdDictOe,
	"dict/mod1/ipa-neologd-dict.of": dictMod1IpaNeologdDictOf,
	"dict/mod1/ipa-neologd-dict.og": dictMod1IpaNeologdDictOg,
	"dict/mod1/ipa-neologd-dict.oh": dictMod1IpaNeologdDictOh,
	"dict/mod1/ipa-neologd-dict.oi": dictMod1IpaNeologdDictOi,
	"dict/mod1/ipa-neologd-dict.oj": dictMod1IpaNeologdDictOj,
	"dict/mod1/ipa-neologd-dict.ok": dictMod1IpaNeologdDictOk,
	"dict/mod1/ipa-neologd-dict.ol": dictMod1IpaNeologdDictOl,
	"dict/mod1/ipa-neologd-dict.om": dictMod1IpaNeologdDictOm,
	"dict/mod1/ipa-neologd-dict.on": dictMod1IpaNeologdDictOn,
	"dict/mod1/ipa-neologd-dict.oo": dictMod1IpaNeologdDictOo,
	"dict/mod1/ipa-neologd-dict.op": dictMod1IpaNeologdDictOp,
	"dict/mod1/ipa-neologd-dict.oq": dictMod1IpaNeologdDictOq,
	"dict/mod1/ipa-neologd-dict.or": dictMod1IpaNeologdDictOr,
	"dict/mod1/ipa-neologd-dict.os": dictMod1IpaNeologdDictOs,
	"dict/mod1/ipa-neologd-dict.ot": dictMod1IpaNeologdDictOt,
	"dict/mod1/ipa-neologd-dict.ou": dictMod1IpaNeologdDictOu,
	"dict/mod1/ipa-neologd-dict.ov": dictMod1IpaNeologdDictOv,
	"dict/mod1/ipa-neologd-dict.ow": dictMod1IpaNeologdDictOw,
	"dict/mod1/ipa-neologd-dict.ox": dictMod1IpaNeologdDictOx,
	"dict/mod1/ipa-neologd-dict.oy": dictMod1IpaNeologdDictOy,
	"dict/mod1/ipa-neologd-dict.oz": dictMod1IpaNeologdDictOz,
	"dict/mod1/ipa-neologd-dict.pa": dictMod1IpaNeologdDictPa,
	"dict/mod1/ipa-neologd-dict.pb": dictMod1IpaNeologdDictPb,
	"dict/mod1/ipa-neologd-dict.pc": dictMod1IpaNeologdDictPc,
	"dict/mod1/ipa-neologd-dict.pd": dictMod1IpaNeologdDictPd,
	"dict/mod1/ipa-neologd-dict.pe": dictMod1IpaNeologdDictPe,
	"dict/mod1/ipa-neologd-dict.pf": dictMod1IpaNeologdDictPf,
	"dict/mod1/ipa-neologd-dict.pg": dictMod1IpaNeologdDictPg,
	"dict/mod1/ipa-neologd-dict.ph": dictMod1IpaNeologdDictPh,
	"dict/mod1/ipa-neologd-dict.pi": dictMod1IpaNeologdDictPi,
	"dict/mod1/ipa-neologd-dict.pj": dictMod1IpaNeologdDictPj,
	"dict/mod1/ipa-neologd-dict.pk": dictMod1IpaNeologdDictPk,
	"dict/mod1/ipa-neologd-dict.pl": dictMod1IpaNeologdDictPl,
	"dict/mod1/ipa-neologd-dict.pm": dictMod1IpaNeologdDictPm,
	"dict/mod1/ipa-neologd-dict.pn": dictMod1IpaNeologdDictPn,
	"dict/mod1/ipa-neologd-dict.po": dictMod1IpaNeologdDictPo,
	"dict/mod1/ipa-neologd-dict.pp": dictMod1IpaNeologdDictPp,
	"dict/mod1/ipa-neologd-dict.pq": dictMod1IpaNeologdDictPq,
	"dict/mod1/ipa-neologd-dict.pr": dictMod1IpaNeologdDictPr,
	"dict/mod1/ipa-neologd-dict.ps": dictMod1IpaNeologdDictPs,
	"dict/mod1/ipa-neologd-dict.pt": dictMod1IpaNeologdDictPt,
	"dict/mod1/ipa-neologd-dict.pu": dictMod1IpaNeologdDictPu,
	"dict/mod1/ipa-neologd-dict.pv": dictMod1IpaNeologdDictPv,
	"dict/mod1/ipa-neologd-dict.pw": dictMod1IpaNeologdDictPw,
	"dict/mod1/ipa-neologd-dict.px": dictMod1IpaNeologdDictPx,
	"dict/mod1/ipa-neologd-dict.py": dictMod1IpaNeologdDictPy,
	"dict/mod1/ipa-neologd-dict.pz": dictMod1IpaNeologdDictPz,
	"dict/mod1/ipa-neologd-dict.qa": dictMod1IpaNeologdDictQa,
	"dict/mod1/ipa-neologd-dict.qb": dictMod1IpaNeologdDictQb,
	"dict/mod1/ipa-neologd-dict.qc": dictMod1IpaNeologdDictQc,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"dict": &bintree{nil, map[string]*bintree{
		"mod1": &bintree{nil, map[string]*bintree{
			"ipa-neologd-dict.jp": &bintree{dictMod1IpaNeologdDictJp, map[string]*bintree{}},
			"ipa-neologd-dict.jq": &bintree{dictMod1IpaNeologdDictJq, map[string]*bintree{}},
			"ipa-neologd-dict.jr": &bintree{dictMod1IpaNeologdDictJr, map[string]*bintree{}},
			"ipa-neologd-dict.js": &bintree{dictMod1IpaNeologdDictJs, map[string]*bintree{}},
			"ipa-neologd-dict.jt": &bintree{dictMod1IpaNeologdDictJt, map[string]*bintree{}},
			"ipa-neologd-dict.ju": &bintree{dictMod1IpaNeologdDictJu, map[string]*bintree{}},
			"ipa-neologd-dict.jv": &bintree{dictMod1IpaNeologdDictJv, map[string]*bintree{}},
			"ipa-neologd-dict.jw": &bintree{dictMod1IpaNeologdDictJw, map[string]*bintree{}},
			"ipa-neologd-dict.jx": &bintree{dictMod1IpaNeologdDictJx, map[string]*bintree{}},
			"ipa-neologd-dict.jy": &bintree{dictMod1IpaNeologdDictJy, map[string]*bintree{}},
			"ipa-neologd-dict.jz": &bintree{dictMod1IpaNeologdDictJz, map[string]*bintree{}},
			"ipa-neologd-dict.ka": &bintree{dictMod1IpaNeologdDictKa, map[string]*bintree{}},
			"ipa-neologd-dict.kb": &bintree{dictMod1IpaNeologdDictKb, map[string]*bintree{}},
			"ipa-neologd-dict.kc": &bintree{dictMod1IpaNeologdDictKc, map[string]*bintree{}},
			"ipa-neologd-dict.kd": &bintree{dictMod1IpaNeologdDictKd, map[string]*bintree{}},
			"ipa-neologd-dict.ke": &bintree{dictMod1IpaNeologdDictKe, map[string]*bintree{}},
			"ipa-neologd-dict.kf": &bintree{dictMod1IpaNeologdDictKf, map[string]*bintree{}},
			"ipa-neologd-dict.kg": &bintree{dictMod1IpaNeologdDictKg, map[string]*bintree{}},
			"ipa-neologd-dict.kh": &bintree{dictMod1IpaNeologdDictKh, map[string]*bintree{}},
			"ipa-neologd-dict.ki": &bintree{dictMod1IpaNeologdDictKi, map[string]*bintree{}},
			"ipa-neologd-dict.kj": &bintree{dictMod1IpaNeologdDictKj, map[string]*bintree{}},
			"ipa-neologd-dict.kk": &bintree{dictMod1IpaNeologdDictKk, map[string]*bintree{}},
			"ipa-neologd-dict.kl": &bintree{dictMod1IpaNeologdDictKl, map[string]*bintree{}},
			"ipa-neologd-dict.km": &bintree{dictMod1IpaNeologdDictKm, map[string]*bintree{}},
			"ipa-neologd-dict.kn": &bintree{dictMod1IpaNeologdDictKn, map[string]*bintree{}},
			"ipa-neologd-dict.ko": &bintree{dictMod1IpaNeologdDictKo, map[string]*bintree{}},
			"ipa-neologd-dict.kp": &bintree{dictMod1IpaNeologdDictKp, map[string]*bintree{}},
			"ipa-neologd-dict.kq": &bintree{dictMod1IpaNeologdDictKq, map[string]*bintree{}},
			"ipa-neologd-dict.kr": &bintree{dictMod1IpaNeologdDictKr, map[string]*bintree{}},
			"ipa-neologd-dict.ks": &bintree{dictMod1IpaNeologdDictKs, map[string]*bintree{}},
			"ipa-neologd-dict.kt": &bintree{dictMod1IpaNeologdDictKt, map[string]*bintree{}},
			"ipa-neologd-dict.ku": &bintree{dictMod1IpaNeologdDictKu, map[string]*bintree{}},
			"ipa-neologd-dict.kv": &bintree{dictMod1IpaNeologdDictKv, map[string]*bintree{}},
			"ipa-neologd-dict.kw": &bintree{dictMod1IpaNeologdDictKw, map[string]*bintree{}},
			"ipa-neologd-dict.kx": &bintree{dictMod1IpaNeologdDictKx, map[string]*bintree{}},
			"ipa-neologd-dict.ky": &bintree{dictMod1IpaNeologdDictKy, map[string]*bintree{}},
			"ipa-neologd-dict.kz": &bintree{dictMod1IpaNeologdDictKz, map[string]*bintree{}},
			"ipa-neologd-dict.la": &bintree{dictMod1IpaNeologdDictLa, map[string]*bintree{}},
			"ipa-neologd-dict.lb": &bintree{dictMod1IpaNeologdDictLb, map[string]*bintree{}},
			"ipa-neologd-dict.lc": &bintree{dictMod1IpaNeologdDictLc, map[string]*bintree{}},
			"ipa-neologd-dict.ld": &bintree{dictMod1IpaNeologdDictLd, map[string]*bintree{}},
			"ipa-neologd-dict.le": &bintree{dictMod1IpaNeologdDictLe, map[string]*bintree{}},
			"ipa-neologd-dict.lf": &bintree{dictMod1IpaNeologdDictLf, map[string]*bintree{}},
			"ipa-neologd-dict.lg": &bintree{dictMod1IpaNeologdDictLg, map[string]*bintree{}},
			"ipa-neologd-dict.lh": &bintree{dictMod1IpaNeologdDictLh, map[string]*bintree{}},
			"ipa-neologd-dict.li": &bintree{dictMod1IpaNeologdDictLi, map[string]*bintree{}},
			"ipa-neologd-dict.lj": &bintree{dictMod1IpaNeologdDictLj, map[string]*bintree{}},
			"ipa-neologd-dict.lk": &bintree{dictMod1IpaNeologdDictLk, map[string]*bintree{}},
			"ipa-neologd-dict.ll": &bintree{dictMod1IpaNeologdDictLl, map[string]*bintree{}},
			"ipa-neologd-dict.lm": &bintree{dictMod1IpaNeologdDictLm, map[string]*bintree{}},
			"ipa-neologd-dict.ln": &bintree{dictMod1IpaNeologdDictLn, map[string]*bintree{}},
			"ipa-neologd-dict.lo": &bintree{dictMod1IpaNeologdDictLo, map[string]*bintree{}},
			"ipa-neologd-dict.lp": &bintree{dictMod1IpaNeologdDictLp, map[string]*bintree{}},
			"ipa-neologd-dict.lq": &bintree{dictMod1IpaNeologdDictLq, map[string]*bintree{}},
			"ipa-neologd-dict.lr": &bintree{dictMod1IpaNeologdDictLr, map[string]*bintree{}},
			"ipa-neologd-dict.ls": &bintree{dictMod1IpaNeologdDictLs, map[string]*bintree{}},
			"ipa-neologd-dict.lt": &bintree{dictMod1IpaNeologdDictLt, map[string]*bintree{}},
			"ipa-neologd-dict.lu": &bintree{dictMod1IpaNeologdDictLu, map[string]*bintree{}},
			"ipa-neologd-dict.lv": &bintree{dictMod1IpaNeologdDictLv, map[string]*bintree{}},
			"ipa-neologd-dict.lw": &bintree{dictMod1IpaNeologdDictLw, map[string]*bintree{}},
			"ipa-neologd-dict.lx": &bintree{dictMod1IpaNeologdDictLx, map[string]*bintree{}},
			"ipa-neologd-dict.ly": &bintree{dictMod1IpaNeologdDictLy, map[string]*bintree{}},
			"ipa-neologd-dict.lz": &bintree{dictMod1IpaNeologdDictLz, map[string]*bintree{}},
			"ipa-neologd-dict.ma": &bintree{dictMod1IpaNeologdDictMa, map[string]*bintree{}},
			"ipa-neologd-dict.mb": &bintree{dictMod1IpaNeologdDictMb, map[string]*bintree{}},
			"ipa-neologd-dict.mc": &bintree{dictMod1IpaNeologdDictMc, map[string]*bintree{}},
			"ipa-neologd-dict.md": &bintree{dictMod1IpaNeologdDictMd, map[string]*bintree{}},
			"ipa-neologd-dict.me": &bintree{dictMod1IpaNeologdDictMe, map[string]*bintree{}},
			"ipa-neologd-dict.mf": &bintree{dictMod1IpaNeologdDictMf, map[string]*bintree{}},
			"ipa-neologd-dict.mg": &bintree{dictMod1IpaNeologdDictMg, map[string]*bintree{}},
			"ipa-neologd-dict.mh": &bintree{dictMod1IpaNeologdDictMh, map[string]*bintree{}},
			"ipa-neologd-dict.mi": &bintree{dictMod1IpaNeologdDictMi, map[string]*bintree{}},
			"ipa-neologd-dict.mj": &bintree{dictMod1IpaNeologdDictMj, map[string]*bintree{}},
			"ipa-neologd-dict.mk": &bintree{dictMod1IpaNeologdDictMk, map[string]*bintree{}},
			"ipa-neologd-dict.ml": &bintree{dictMod1IpaNeologdDictMl, map[string]*bintree{}},
			"ipa-neologd-dict.mm": &bintree{dictMod1IpaNeologdDictMm, map[string]*bintree{}},
			"ipa-neologd-dict.mn": &bintree{dictMod1IpaNeologdDictMn, map[string]*bintree{}},
			"ipa-neologd-dict.mo": &bintree{dictMod1IpaNeologdDictMo, map[string]*bintree{}},
			"ipa-neologd-dict.mp": &bintree{dictMod1IpaNeologdDictMp, map[string]*bintree{}},
			"ipa-neologd-dict.mq": &bintree{dictMod1IpaNeologdDictMq, map[string]*bintree{}},
			"ipa-neologd-dict.mr": &bintree{dictMod1IpaNeologdDictMr, map[string]*bintree{}},
			"ipa-neologd-dict.ms": &bintree{dictMod1IpaNeologdDictMs, map[string]*bintree{}},
			"ipa-neologd-dict.mt": &bintree{dictMod1IpaNeologdDictMt, map[string]*bintree{}},
			"ipa-neologd-dict.mu": &bintree{dictMod1IpaNeologdDictMu, map[string]*bintree{}},
			"ipa-neologd-dict.mv": &bintree{dictMod1IpaNeologdDictMv, map[string]*bintree{}},
			"ipa-neologd-dict.mw": &bintree{dictMod1IpaNeologdDictMw, map[string]*bintree{}},
			"ipa-neologd-dict.mx": &bintree{dictMod1IpaNeologdDictMx, map[string]*bintree{}},
			"ipa-neologd-dict.my": &bintree{dictMod1IpaNeologdDictMy, map[string]*bintree{}},
			"ipa-neologd-dict.mz": &bintree{dictMod1IpaNeologdDictMz, map[string]*bintree{}},
			"ipa-neologd-dict.na": &bintree{dictMod1IpaNeologdDictNa, map[string]*bintree{}},
			"ipa-neologd-dict.nb": &bintree{dictMod1IpaNeologdDictNb, map[string]*bintree{}},
			"ipa-neologd-dict.nc": &bintree{dictMod1IpaNeologdDictNc, map[string]*bintree{}},
			"ipa-neologd-dict.nd": &bintree{dictMod1IpaNeologdDictNd, map[string]*bintree{}},
			"ipa-neologd-dict.ne": &bintree{dictMod1IpaNeologdDictNe, map[string]*bintree{}},
			"ipa-neologd-dict.nf": &bintree{dictMod1IpaNeologdDictNf, map[string]*bintree{}},
			"ipa-neologd-dict.ng": &bintree{dictMod1IpaNeologdDictNg, map[string]*bintree{}},
			"ipa-neologd-dict.nh": &bintree{dictMod1IpaNeologdDictNh, map[string]*bintree{}},
			"ipa-neologd-dict.ni": &bintree{dictMod1IpaNeologdDictNi, map[string]*bintree{}},
			"ipa-neologd-dict.nj": &bintree{dictMod1IpaNeologdDictNj, map[string]*bintree{}},
			"ipa-neologd-dict.nk": &bintree{dictMod1IpaNeologdDictNk, map[string]*bintree{}},
			"ipa-neologd-dict.nl": &bintree{dictMod1IpaNeologdDictNl, map[string]*bintree{}},
			"ipa-neologd-dict.nm": &bintree{dictMod1IpaNeologdDictNm, map[string]*bintree{}},
			"ipa-neologd-dict.nn": &bintree{dictMod1IpaNeologdDictNn, map[string]*bintree{}},
			"ipa-neologd-dict.no": &bintree{dictMod1IpaNeologdDictNo, map[string]*bintree{}},
			"ipa-neologd-dict.np": &bintree{dictMod1IpaNeologdDictNp, map[string]*bintree{}},
			"ipa-neologd-dict.nq": &bintree{dictMod1IpaNeologdDictNq, map[string]*bintree{}},
			"ipa-neologd-dict.nr": &bintree{dictMod1IpaNeologdDictNr, map[string]*bintree{}},
			"ipa-neologd-dict.ns": &bintree{dictMod1IpaNeologdDictNs, map[string]*bintree{}},
			"ipa-neologd-dict.nt": &bintree{dictMod1IpaNeologdDictNt, map[string]*bintree{}},
			"ipa-neologd-dict.nu": &bintree{dictMod1IpaNeologdDictNu, map[string]*bintree{}},
			"ipa-neologd-dict.nv": &bintree{dictMod1IpaNeologdDictNv, map[string]*bintree{}},
			"ipa-neologd-dict.nw": &bintree{dictMod1IpaNeologdDictNw, map[string]*bintree{}},
			"ipa-neologd-dict.nx": &bintree{dictMod1IpaNeologdDictNx, map[string]*bintree{}},
			"ipa-neologd-dict.ny": &bintree{dictMod1IpaNeologdDictNy, map[string]*bintree{}},
			"ipa-neologd-dict.nz": &bintree{dictMod1IpaNeologdDictNz, map[string]*bintree{}},
			"ipa-neologd-dict.oa": &bintree{dictMod1IpaNeologdDictOa, map[string]*bintree{}},
			"ipa-neologd-dict.ob": &bintree{dictMod1IpaNeologdDictOb, map[string]*bintree{}},
			"ipa-neologd-dict.oc": &bintree{dictMod1IpaNeologdDictOc, map[string]*bintree{}},
			"ipa-neologd-dict.od": &bintree{dictMod1IpaNeologdDictOd, map[string]*bintree{}},
			"ipa-neologd-dict.oe": &bintree{dictMod1IpaNeologdDictOe, map[string]*bintree{}},
			"ipa-neologd-dict.of": &bintree{dictMod1IpaNeologdDictOf, map[string]*bintree{}},
			"ipa-neologd-dict.og": &bintree{dictMod1IpaNeologdDictOg, map[string]*bintree{}},
			"ipa-neologd-dict.oh": &bintree{dictMod1IpaNeologdDictOh, map[string]*bintree{}},
			"ipa-neologd-dict.oi": &bintree{dictMod1IpaNeologdDictOi, map[string]*bintree{}},
			"ipa-neologd-dict.oj": &bintree{dictMod1IpaNeologdDictOj, map[string]*bintree{}},
			"ipa-neologd-dict.ok": &bintree{dictMod1IpaNeologdDictOk, map[string]*bintree{}},
			"ipa-neologd-dict.ol": &bintree{dictMod1IpaNeologdDictOl, map[string]*bintree{}},
			"ipa-neologd-dict.om": &bintree{dictMod1IpaNeologdDictOm, map[string]*bintree{}},
			"ipa-neologd-dict.on": &bintree{dictMod1IpaNeologdDictOn, map[string]*bintree{}},
			"ipa-neologd-dict.oo": &bintree{dictMod1IpaNeologdDictOo, map[string]*bintree{}},
			"ipa-neologd-dict.op": &bintree{dictMod1IpaNeologdDictOp, map[string]*bintree{}},
			"ipa-neologd-dict.oq": &bintree{dictMod1IpaNeologdDictOq, map[string]*bintree{}},
			"ipa-neologd-dict.or": &bintree{dictMod1IpaNeologdDictOr, map[string]*bintree{}},
			"ipa-neologd-dict.os": &bintree{dictMod1IpaNeologdDictOs, map[string]*bintree{}},
			"ipa-neologd-dict.ot": &bintree{dictMod1IpaNeologdDictOt, map[string]*bintree{}},
			"ipa-neologd-dict.ou": &bintree{dictMod1IpaNeologdDictOu, map[string]*bintree{}},
			"ipa-neologd-dict.ov": &bintree{dictMod1IpaNeologdDictOv, map[string]*bintree{}},
			"ipa-neologd-dict.ow": &bintree{dictMod1IpaNeologdDictOw, map[string]*bintree{}},
			"ipa-neologd-dict.ox": &bintree{dictMod1IpaNeologdDictOx, map[string]*bintree{}},
			"ipa-neologd-dict.oy": &bintree{dictMod1IpaNeologdDictOy, map[string]*bintree{}},
			"ipa-neologd-dict.oz": &bintree{dictMod1IpaNeologdDictOz, map[string]*bintree{}},
			"ipa-neologd-dict.pa": &bintree{dictMod1IpaNeologdDictPa, map[string]*bintree{}},
			"ipa-neologd-dict.pb": &bintree{dictMod1IpaNeologdDictPb, map[string]*bintree{}},
			"ipa-neologd-dict.pc": &bintree{dictMod1IpaNeologdDictPc, map[string]*bintree{}},
			"ipa-neologd-dict.pd": &bintree{dictMod1IpaNeologdDictPd, map[string]*bintree{}},
			"ipa-neologd-dict.pe": &bintree{dictMod1IpaNeologdDictPe, map[string]*bintree{}},
			"ipa-neologd-dict.pf": &bintree{dictMod1IpaNeologdDictPf, map[string]*bintree{}},
			"ipa-neologd-dict.pg": &bintree{dictMod1IpaNeologdDictPg, map[string]*bintree{}},
			"ipa-neologd-dict.ph": &bintree{dictMod1IpaNeologdDictPh, map[string]*bintree{}},
			"ipa-neologd-dict.pi": &bintree{dictMod1IpaNeologdDictPi, map[string]*bintree{}},
			"ipa-neologd-dict.pj": &bintree{dictMod1IpaNeologdDictPj, map[string]*bintree{}},
			"ipa-neologd-dict.pk": &bintree{dictMod1IpaNeologdDictPk, map[string]*bintree{}},
			"ipa-neologd-dict.pl": &bintree{dictMod1IpaNeologdDictPl, map[string]*bintree{}},
			"ipa-neologd-dict.pm": &bintree{dictMod1IpaNeologdDictPm, map[string]*bintree{}},
			"ipa-neologd-dict.pn": &bintree{dictMod1IpaNeologdDictPn, map[string]*bintree{}},
			"ipa-neologd-dict.po": &bintree{dictMod1IpaNeologdDictPo, map[string]*bintree{}},
			"ipa-neologd-dict.pp": &bintree{dictMod1IpaNeologdDictPp, map[string]*bintree{}},
			"ipa-neologd-dict.pq": &bintree{dictMod1IpaNeologdDictPq, map[string]*bintree{}},
			"ipa-neologd-dict.pr": &bintree{dictMod1IpaNeologdDictPr, map[string]*bintree{}},
			"ipa-neologd-dict.ps": &bintree{dictMod1IpaNeologdDictPs, map[string]*bintree{}},
			"ipa-neologd-dict.pt": &bintree{dictMod1IpaNeologdDictPt, map[string]*bintree{}},
			"ipa-neologd-dict.pu": &bintree{dictMod1IpaNeologdDictPu, map[string]*bintree{}},
			"ipa-neologd-dict.pv": &bintree{dictMod1IpaNeologdDictPv, map[string]*bintree{}},
			"ipa-neologd-dict.pw": &bintree{dictMod1IpaNeologdDictPw, map[string]*bintree{}},
			"ipa-neologd-dict.px": &bintree{dictMod1IpaNeologdDictPx, map[string]*bintree{}},
			"ipa-neologd-dict.py": &bintree{dictMod1IpaNeologdDictPy, map[string]*bintree{}},
			"ipa-neologd-dict.pz": &bintree{dictMod1IpaNeologdDictPz, map[string]*bintree{}},
			"ipa-neologd-dict.qa": &bintree{dictMod1IpaNeologdDictQa, map[string]*bintree{}},
			"ipa-neologd-dict.qb": &bintree{dictMod1IpaNeologdDictQb, map[string]*bintree{}},
			"ipa-neologd-dict.qc": &bintree{dictMod1IpaNeologdDictQc, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

